// Code generated by 'guts'. DO NOT EDIT.

// From types/diagnostics.go
export type DiagnosticSeverityString = "error" | "warning";

export const DiagnosticSeverityStrings: DiagnosticSeverityString[] = ["error", "warning"];

// From types/diagnostics.go
export type Diagnostics = readonly (FriendlyDiagnostic)[];

// From types/diagnostics.go
export interface FriendlyDiagnostic {
    readonly severity: DiagnosticSeverityString;
    readonly summary: string;
    readonly detail: string;
}

// From types/parameter.go
export interface Parameter extends RichParameter {
    readonly value: string;
    readonly diagnostics: Diagnostics;
}

// From types/parameter.go
export interface ParameterOption {
    readonly name: string;
    readonly description: string;
    readonly value: string;
    readonly icon: string;
}

// From types/enum.go
export type ParameterType = "boolean" | "list(string)" | "number" | "string";

export const ParameterTypes: ParameterType[] = ["boolean", "list(string)", "number", "string"];

// From types/parameter.go
export interface ParameterValidation {
    readonly validation_regex: string | null;
    readonly validation_error: string;
    readonly validation_min: number | null;
    readonly validation_max: number | null;
    readonly validation_monotonic: string | null;
}

// From web/session.go
export interface Request {
    readonly id: number;
    readonly inputs: Record<string, string>;
}

// From web/session.go
export interface Response {
    readonly id: number;
    readonly diagnostics: Diagnostics;
    readonly parameters: readonly Parameter[];
}

// From types/parameter.go
export interface RichParameter {
    readonly name: string;
    readonly display_name: string;
    readonly description: string;
    readonly form_control: string;
    readonly type: ParameterType;
    readonly mutable: boolean;
    readonly default_value: string;
    readonly icon: string;
    readonly options: readonly (ParameterOption)[];
    readonly validations: readonly (ParameterValidation)[];
    readonly required: boolean;
    readonly order: number;
    readonly ephemeral: boolean;
}

