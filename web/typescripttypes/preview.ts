// Code generated by 'guts'. DO NOT EDIT.

// From web/diagnostic.go
export interface Diagnostic {
    readonly severity: DiagnosticSeverity;
    readonly summary: string;
    readonly detail: string;
}

// From web/diagnostic.go
export type DiagnosticSeverity = "error" | "warning";

export const DiagnosticSeveritys: DiagnosticSeverity[] = ["error", "warning"];

// From web/diagnostic.go
export type Diagnostics = readonly Diagnostic[];

// From types/parameter.go
export interface Parameter extends RichParameter {
    readonly Value: ParameterValue;
}

// From types/parameter.go
export interface ParameterOption {
    readonly name: string;
    readonly description: string;
    readonly value: string;
    readonly icon: string;
}

// From types/parameter.go
export interface ParameterValidation {
    readonly validation_regex: string;
    readonly validation_error: string;
    readonly validation_min: number | null;
    readonly validation_max: number | null;
    readonly validation_monotonic: string;
}

// From types/parameter.go
export interface ParameterValue {
    readonly value: string;
}

// From web/session.go
export interface Request {
    readonly ID: number;
    readonly Inputs: Record<string, string>;
}

// From web/session.go
export interface Response {
    readonly diagnostics: Diagnostics;
    readonly paramaters: readonly Parameter[];
}

// From types/parameter.go
export interface RichParameter {
    readonly name: string;
    readonly description: string;
    readonly type: string;
    readonly mutable: boolean;
    readonly default_value: string;
    readonly icon: string;
    readonly options: readonly (ParameterOption | null)[];
    readonly validations: readonly (ParameterValidation | null)[];
    readonly required: boolean;
    readonly display_name: string;
    readonly order: number;
    readonly ephemeral: boolean;
    readonly block_name: string;
}

// From web/session.go
export interface Session {
}

